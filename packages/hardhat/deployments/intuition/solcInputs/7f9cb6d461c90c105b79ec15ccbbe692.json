{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/TrustEscrow.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title TrustEscrow\n * @dev A secure escrow contract that allows depositors to fund escrows\n * and arbiters to release or refund funds to beneficiaries or depositors respectively.\n * @author Your Name\n */\ncontract TrustEscrow is ReentrancyGuard, Pausable, Ownable {\n    // Custom errors\n    error InvalidAddress();\n    error OnlyDepositor();\n    error OnlyArbiter();\n    error AlreadyFunded();\n    error NotFunded();\n    error AlreadyReleased();\n    error InvalidAmount();\n    error OnlyDepositorCanSendETH();\n\n    address public depositor;\n    address public beneficiary;\n    address public arbiter;\n    uint256 public amount;\n    bool public isFunded;\n    bool public isReleased;\n    bool public isRefunded;\n\n    event Deposited(address indexed depositor, uint256 amount);\n    event Released(address indexed beneficiary, uint256 amount);\n    event Refunded(address indexed depositor, uint256 amount);\n    event EscrowCreated(address indexed depositor, address indexed beneficiary, address indexed arbiter);\n\n    modifier onlyDepositor() {\n        if (msg.sender != depositor) revert OnlyDepositor();\n        _;\n    }\n\n    modifier onlyArbiter() {\n        if (msg.sender != arbiter) revert OnlyArbiter();\n        _;\n    }\n\n    modifier notFunded() {\n        if (isFunded) revert AlreadyFunded();\n        _;\n    }\n\n    modifier requireFunded() {\n        if (!isFunded) revert NotFunded();\n        _;\n    }\n\n    modifier notReleased() {\n        if (isReleased || isRefunded) revert AlreadyReleased();\n        _;\n    }\n\n    /**\n     * @dev Constructor creates a new escrow\n     * @param _depositor The address that will fund the escrow\n     * @param _beneficiary The address that will receive funds if released\n     * @param _arbiter The address that can release or refund funds\n     */\n    constructor(address _depositor, address _beneficiary, address _arbiter) payable Ownable(_depositor) {\n        if (_depositor == address(0)) revert InvalidAddress();\n        if (_beneficiary == address(0)) revert InvalidAddress();\n        if (_arbiter == address(0)) revert InvalidAddress();\n        if (_beneficiary == _arbiter) revert InvalidAddress();\n        if (_depositor == _beneficiary) revert InvalidAddress();\n        if (_depositor == _arbiter) revert InvalidAddress();\n\n        depositor = _depositor;\n        beneficiary = _beneficiary;\n        arbiter = _arbiter;\n\n        emit EscrowCreated(depositor, beneficiary, arbiter);\n    }\n\n    /**\n     * @dev Depositor funds the escrow\n     */\n    function deposit() external payable onlyDepositor notFunded whenNotPaused nonReentrant {\n        if (msg.value == 0) revert InvalidAmount();\n\n        amount = msg.value;\n        isFunded = true;\n        emit Deposited(depositor, msg.value);\n    }\n\n    /**\n     * @dev Arbiter releases funds to beneficiary\n     */\n    function release() external onlyArbiter requireFunded notReleased whenNotPaused nonReentrant {\n        isReleased = true;\n        \n        (bool success, ) = payable(beneficiary).call{value: amount}(\"\");\n        require(success, \"Failed to send ETH to beneficiary\");\n        \n        emit Released(beneficiary, amount);\n    }\n\n    /**\n     * @dev Arbiter refunds funds to depositor\n     */\n    function refund() external onlyArbiter requireFunded notReleased whenNotPaused nonReentrant {\n        isRefunded = true;\n        \n        (bool success, ) = payable(depositor).call{value: amount}(\"\");\n        require(success, \"Failed to send ETH to depositor\");\n        \n        emit Refunded(depositor, amount);\n    }\n\n    /**\n     * @dev Get escrow status\n     */\n    function getEscrowStatus() external view returns (\n        address _depositor,\n        address _beneficiary,\n        address _arbiter,\n        uint256 _amount,\n        bool _isFunded,\n        bool _isReleased,\n        bool _isRefunded\n    ) {\n        return (depositor, beneficiary, arbiter, amount, isFunded, isReleased, isRefunded);\n    }\n\n    /**\n     * @dev Emergency pause function (only owner)\n     */\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    /**\n     * @dev Emergency unpause function (only owner)\n     */\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    /**\n     * @dev Emergency withdrawal function (only owner, when paused)\n     */\n    function emergencyWithdraw() external onlyOwner whenPaused {\n        uint256 balance = address(this).balance;\n        if (balance > 0) {\n            (bool success, ) = payable(owner()).call{value: balance}(\"\");\n            require(success, \"Failed to withdraw ETH\");\n        }\n    }\n\n    /**\n     * @dev Function to receive ETH\n     */\n    receive() external payable {\n        // Only allow deposits from the depositor\n        if (msg.sender != depositor) {\n            revert OnlyDepositorCanSendETH();\n        }\n        \n        // Handle the deposit\n        if (!isFunded) {\n            amount = msg.value;\n            isFunded = true;\n            emit Deposited(depositor, msg.value);\n        }\n    }\n\n    /**\n     * @dev Function to handle failed ETH transfers\n     */\n    fallback() external payable {\n        revert(\"Function not found\");\n    }\n}\n"
    },
    "contracts/TrustEscrowFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"./TrustEscrow.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\n\n/**\n * @title TrustEscrowFactory\n * @dev Factory contract for creating TrustEscrow instances\n * @author Your Name\n */\ncontract TrustEscrowFactory is Ownable, Pausable {\n    // Custom errors\n    error InvalidAddress();\n    error ArraysLengthMismatch();\n    error EmptyArrays();\n    error TooManyEscrows();\n    error EscrowDoesNotExist();\n    error FactoryIsPaused();\n\n    // Array to store all created escrow addresses\n    address[] public escrows;\n    \n    // Mapping from user address to their created escrows\n    mapping(address => address[]) public userEscrows;\n    \n    // Mapping from escrow address to escrow info\n    mapping(address => EscrowInfo) public escrowInfo;\n    \n    // Events\n    event EscrowCreated(\n        address indexed escrowAddress,\n        address indexed depositor,\n        address indexed beneficiary,\n        address arbiter,\n        uint256 timestamp\n    );\n    \n    event FactoryPaused(address indexed pauser);\n    event FactoryUnpaused(address indexed unpauser);\n    \n    // Struct to store escrow information\n    struct EscrowInfo {\n        address depositor;\n        address beneficiary;\n        address arbiter;\n        uint256 createdAt;\n        bool exists;\n    }\n    \n    // Modifiers\n    // Note: whenNotPaused is inherited from Pausable contract\n    \n    /**\n     * @dev Constructor sets the factory owner\n     */\n    constructor() Ownable(msg.sender) {}\n    \n    /**\n     * @dev Create a new escrow contract\n     * @param _beneficiary The address that will receive funds if released\n     * @param _arbiter The address that can release or refund funds\n     * @return escrowAddress The address of the newly created escrow\n     */\n    function createEscrow(\n        address _beneficiary,\n        address _arbiter\n    ) internal returns (address escrowAddress) {\n        if (_beneficiary == address(0)) revert InvalidAddress();\n        if (_arbiter == address(0)) revert InvalidAddress();\n        if (_beneficiary == _arbiter) revert InvalidAddress();\n        if (_beneficiary == msg.sender) revert InvalidAddress();\n        if (_arbiter == msg.sender) revert InvalidAddress();\n        \n        // Create new escrow contract\n        TrustEscrow escrow = new TrustEscrow(msg.sender, _beneficiary, _arbiter);\n        escrowAddress = address(escrow);\n        \n        // Store escrow information\n        escrowInfo[escrowAddress] = EscrowInfo({\n            depositor: msg.sender,\n            beneficiary: _beneficiary,\n            arbiter: _arbiter,\n            createdAt: block.timestamp,\n            exists: true\n        });\n        \n        // Add to global escrows array\n        escrows.push(escrowAddress);\n        \n        // Add to user's escrows array\n        userEscrows[msg.sender].push(escrowAddress);\n        \n        // Emit event\n        emit EscrowCreated(\n            escrowAddress,\n            msg.sender,\n            _beneficiary,\n            _arbiter,\n            block.timestamp\n        );\n    }\n\n    /**\n     * @dev Create a new escrow contract (external function)\n     * @param _beneficiary The address that will receive funds if released\n     * @param _arbiter The address that can release or refund funds\n     * @return escrowAddress The address of the newly created escrow\n     */\n    function createEscrowExternal(\n        address _beneficiary,\n        address _arbiter\n    ) external whenNotPaused returns (address escrowAddress) {\n        return createEscrow(_beneficiary, _arbiter);\n    }\n    \n    /**\n     * @dev Create multiple escrows in a single transaction\n     * @param _beneficiaries Array of beneficiary addresses\n     * @param _arbiters Array of arbiter addresses\n     * @return escrowAddresses Array of created escrow addresses\n     */\n    function createMultipleEscrows(\n        address[] calldata _beneficiaries,\n        address[] calldata _arbiters\n    ) external whenNotPaused returns (address[] memory escrowAddresses) {\n        if (_beneficiaries.length != _arbiters.length) revert ArraysLengthMismatch();\n        if (_beneficiaries.length == 0) revert EmptyArrays();\n        if (_beneficiaries.length > 10) revert TooManyEscrows();\n        \n        escrowAddresses = new address[](_beneficiaries.length);\n        \n        for (uint256 i = 0; i < _beneficiaries.length; i++) {\n            escrowAddresses[i] = createEscrow(_beneficiaries[i], _arbiters[i]);\n        }\n    }\n    \n    /**\n     * @dev Get all escrows created by a specific user\n     * @param _user The user address\n     * @return Array of escrow addresses\n     */\n    function getUserEscrows(address _user) external view returns (address[] memory) {\n        return userEscrows[_user];\n    }\n    \n    /**\n     * @dev Get all escrows in the factory\n     * @return Array of all escrow addresses\n     */\n    function getAllEscrows() external view returns (address[] memory) {\n        return escrows;\n    }\n    \n    /**\n     * @dev Get total number of escrows created\n     * @return Total count of escrows\n     */\n    function getEscrowCount() external view returns (uint256) {\n        return escrows.length;\n    }\n    \n    /**\n     * @dev Get escrow information by address\n     * @param _escrow The escrow contract address\n     * @return EscrowInfo struct containing escrow details\n     */\n    function getEscrowInfo(address _escrow) external view returns (EscrowInfo memory) {\n        if (!escrowInfo[_escrow].exists) revert EscrowDoesNotExist();\n        return escrowInfo[_escrow];\n    }\n    \n    /**\n     * @dev Check if an address is a valid escrow created by this factory\n     * @param _escrow The escrow contract address\n     * @return True if valid escrow, false otherwise\n     */\n    function isValidEscrow(address _escrow) external view returns (bool) {\n        return escrowInfo[_escrow].exists;\n    }\n    \n    /**\n     * @dev Get escrows by status (funded, released, refunded)\n     * @param _status The status to filter by (0: all, 1: funded, 2: released, 3: refunded)\n     * @return Array of escrow addresses matching the status\n     */\n    function getEscrowsByStatus(uint8 _status) external view returns (address[] memory) {\n        address[] memory filteredEscrows = new address[](escrows.length);\n        uint256 count = 0;\n        \n        for (uint256 i = 0; i < escrows.length; i++) {\n            address escrowAddr = escrows[i];\n            TrustEscrow escrow = TrustEscrow(payable(escrowAddr));\n            \n            bool include = false;\n            if (_status == 0) {\n                include = true; // All escrows\n            } else if (_status == 1) {\n                include = escrow.isFunded();\n            } else if (_status == 2) {\n                include = escrow.isReleased();\n            } else if (_status == 3) {\n                include = escrow.isRefunded();\n            }\n            \n            if (include) {\n                filteredEscrows[count] = escrowAddr;\n                count++;\n            }\n        }\n        \n        // Resize array to actual count\n        address[] memory result = new address[](count);\n        for (uint256 i = 0; i < count; i++) {\n            result[i] = filteredEscrows[i];\n        }\n        \n        return result;\n    }\n    \n    /**\n     * @dev Emergency pause function (only owner)\n     */\n    function pause() external onlyOwner {\n        _pause();\n        emit FactoryPaused(msg.sender);\n    }\n    \n    /**\n     * @dev Emergency unpause function (only owner)\n     */\n    function unpause() external onlyOwner {\n        _unpause();\n        emit FactoryUnpaused(msg.sender);\n    }\n    \n    /**\n     * @dev Get factory statistics\n     * @return totalEscrows Total number of escrows created\n     * @return totalFunded Number of funded escrows\n     * @return totalReleased Number of released escrows\n     * @return totalRefunded Number of refunded escrows\n     */\n    function getFactoryStats() external view returns (\n        uint256 totalEscrows,\n        uint256 totalFunded,\n        uint256 totalReleased,\n        uint256 totalRefunded\n    ) {\n        totalEscrows = escrows.length;\n        \n        for (uint256 i = 0; i < escrows.length; i++) {\n            TrustEscrow escrow = TrustEscrow(payable(escrows[i]));\n            \n            if (escrow.isFunded()) {\n                totalFunded++;\n            }\n            if (escrow.isReleased()) {\n                totalReleased++;\n            }\n            if (escrow.isRefunded()) {\n                totalRefunded++;\n            }\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}