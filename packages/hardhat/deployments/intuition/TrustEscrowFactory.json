{
  "address": "0x2d3d83B06d7f2cb85A86a24F71366D62A39859cC",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ArraysLengthMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyArrays",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EscrowDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FactoryIsPaused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooManyEscrows",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "escrowAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "arbiter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "EscrowCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pauser",
          "type": "address"
        }
      ],
      "name": "FactoryPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "unpauser",
          "type": "address"
        }
      ],
      "name": "FactoryUnpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_arbiter",
          "type": "address"
        }
      ],
      "name": "createEscrowExternal",
      "outputs": [
        {
          "internalType": "address",
          "name": "escrowAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_beneficiaries",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_arbiters",
          "type": "address[]"
        }
      ],
      "name": "createMultipleEscrows",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "escrowAddresses",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "escrowInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "arbiter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "createdAt",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "escrows",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllEscrows",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEscrowCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_escrow",
          "type": "address"
        }
      ],
      "name": "getEscrowInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "depositor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "arbiter",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "createdAt",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "exists",
              "type": "bool"
            }
          ],
          "internalType": "struct TrustEscrowFactory.EscrowInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_status",
          "type": "uint8"
        }
      ],
      "name": "getEscrowsByStatus",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFactoryStats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalEscrows",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalFunded",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalReleased",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalRefunded",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserEscrows",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_escrow",
          "type": "address"
        }
      ],
      "name": "isValidEscrow",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userEscrows",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5cb00f0408cc23bbcf9ea0e57c3ecf4975efda47417723e6b52ddfa58b5614ff",
  "receipt": {
    "to": null,
    "from": "0xd6D22d84DF99D999876D9D9c5D626A410B9B8FAf",
    "contractAddress": "0x2d3d83B06d7f2cb85A86a24F71366D62A39859cC",
    "transactionIndex": 1,
    "gasUsed": "1940566",
    "logsBloom": "0x
    "blockHash": "0xd3ba91e4bd89fc90da185a51c6754ac9a4aed6d043d612edd68738018ed373ed",
    "transactionHash": "0x5cb00f0408cc23bbcf9ea0e57c3ecf4975efda47417723e6b52ddfa58b5614ff",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 1351851,
        "transactionHash": "0x5cb00f0408cc23bbcf9ea0e57c3ecf4975efda47417723e6b52ddfa58b5614ff",
        "address": "0x2d3d83B06d7f2cb85A86a24F71366D62A39859cC",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d6d22d84df99d999876d9d9c5d626a410b9b8faf"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xd3ba91e4bd89fc90da185a51c6754ac9a4aed6d043d612edd68738018ed373ed"
      }
    ],
    "blockNumber": 1351851,
    "cumulativeGasUsed": "1940566",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7f9cb6d461c90c105b79ec15ccbbe692",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ArraysLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyArrays\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EscrowDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FactoryIsPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyEscrows\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"escrowAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"arbiter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"EscrowCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"}],\"name\":\"FactoryPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"unpauser\",\"type\":\"address\"}],\"name\":\"FactoryUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_arbiter\",\"type\":\"address\"}],\"name\":\"createEscrowExternal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"escrowAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_beneficiaries\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_arbiters\",\"type\":\"address[]\"}],\"name\":\"createMultipleEscrows\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"escrowAddresses\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"escrowInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"arbiter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"escrows\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllEscrows\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEscrowCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_escrow\",\"type\":\"address\"}],\"name\":\"getEscrowInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"arbiter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"internalType\":\"struct TrustEscrowFactory.EscrowInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"getEscrowsByStatus\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFactoryStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalEscrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFunded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReleased\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRefunded\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserEscrows\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_escrow\",\"type\":\"address\"}],\"name\":\"isValidEscrow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userEscrows\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Your Name\",\"details\":\"Factory contract for creating TrustEscrow instances\",\"errors\":{\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Constructor sets the factory owner\"},\"createEscrowExternal(address,address)\":{\"details\":\"Create a new escrow contract (external function)\",\"params\":{\"_arbiter\":\"The address that can release or refund funds\",\"_beneficiary\":\"The address that will receive funds if released\"},\"returns\":{\"escrowAddress\":\"The address of the newly created escrow\"}},\"createMultipleEscrows(address[],address[])\":{\"details\":\"Create multiple escrows in a single transaction\",\"params\":{\"_arbiters\":\"Array of arbiter addresses\",\"_beneficiaries\":\"Array of beneficiary addresses\"},\"returns\":{\"escrowAddresses\":\"Array of created escrow addresses\"}},\"getAllEscrows()\":{\"details\":\"Get all escrows in the factory\",\"returns\":{\"_0\":\"Array of all escrow addresses\"}},\"getEscrowCount()\":{\"details\":\"Get total number of escrows created\",\"returns\":{\"_0\":\"Total count of escrows\"}},\"getEscrowInfo(address)\":{\"details\":\"Get escrow information by address\",\"params\":{\"_escrow\":\"The escrow contract address\"},\"returns\":{\"_0\":\"EscrowInfo struct containing escrow details\"}},\"getEscrowsByStatus(uint8)\":{\"details\":\"Get escrows by status (funded, released, refunded)\",\"params\":{\"_status\":\"The status to filter by (0: all, 1: funded, 2: released, 3: refunded)\"},\"returns\":{\"_0\":\"Array of escrow addresses matching the status\"}},\"getFactoryStats()\":{\"details\":\"Get factory statistics\",\"returns\":{\"totalEscrows\":\"Total number of escrows created\",\"totalFunded\":\"Number of funded escrows\",\"totalRefunded\":\"Number of refunded escrows\",\"totalReleased\":\"Number of released escrows\"}},\"getUserEscrows(address)\":{\"details\":\"Get all escrows created by a specific user\",\"params\":{\"_user\":\"The user address\"},\"returns\":{\"_0\":\"Array of escrow addresses\"}},\"isValidEscrow(address)\":{\"details\":\"Check if an address is a valid escrow created by this factory\",\"params\":{\"_escrow\":\"The escrow contract address\"},\"returns\":{\"_0\":\"True if valid escrow, false otherwise\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Emergency pause function (only owner)\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Emergency unpause function (only owner)\"}},\"title\":\"TrustEscrowFactory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TrustEscrowFactory.sol\":\"TrustEscrowFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xdb484371dfbb848cb6f5d70464e9ac9b2900e4164ead76bbce4fef0b44bcc68f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"contracts/TrustEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title TrustEscrow\\n * @dev A secure escrow contract that allows depositors to fund escrows\\n * and arbiters to release or refund funds to beneficiaries or depositors respectively.\\n * @author Your Name\\n */\\ncontract TrustEscrow is ReentrancyGuard, Pausable, Ownable {\\n    // Custom errors\\n    error InvalidAddress();\\n    error OnlyDepositor();\\n    error OnlyArbiter();\\n    error AlreadyFunded();\\n    error NotFunded();\\n    error AlreadyReleased();\\n    error InvalidAmount();\\n    error OnlyDepositorCanSendETH();\\n\\n    address public depositor;\\n    address public beneficiary;\\n    address public arbiter;\\n    uint256 public amount;\\n    bool public isFunded;\\n    bool public isReleased;\\n    bool public isRefunded;\\n\\n    event Deposited(address indexed depositor, uint256 amount);\\n    event Released(address indexed beneficiary, uint256 amount);\\n    event Refunded(address indexed depositor, uint256 amount);\\n    event EscrowCreated(address indexed depositor, address indexed beneficiary, address indexed arbiter);\\n\\n    modifier onlyDepositor() {\\n        if (msg.sender != depositor) revert OnlyDepositor();\\n        _;\\n    }\\n\\n    modifier onlyArbiter() {\\n        if (msg.sender != arbiter) revert OnlyArbiter();\\n        _;\\n    }\\n\\n    modifier notFunded() {\\n        if (isFunded) revert AlreadyFunded();\\n        _;\\n    }\\n\\n    modifier requireFunded() {\\n        if (!isFunded) revert NotFunded();\\n        _;\\n    }\\n\\n    modifier notReleased() {\\n        if (isReleased || isRefunded) revert AlreadyReleased();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Constructor creates a new escrow\\n     * @param _depositor The address that will fund the escrow\\n     * @param _beneficiary The address that will receive funds if released\\n     * @param _arbiter The address that can release or refund funds\\n     */\\n    constructor(address _depositor, address _beneficiary, address _arbiter) payable Ownable(_depositor) {\\n        if (_depositor == address(0)) revert InvalidAddress();\\n        if (_beneficiary == address(0)) revert InvalidAddress();\\n        if (_arbiter == address(0)) revert InvalidAddress();\\n        if (_beneficiary == _arbiter) revert InvalidAddress();\\n        if (_depositor == _beneficiary) revert InvalidAddress();\\n        if (_depositor == _arbiter) revert InvalidAddress();\\n\\n        depositor = _depositor;\\n        beneficiary = _beneficiary;\\n        arbiter = _arbiter;\\n\\n        emit EscrowCreated(depositor, beneficiary, arbiter);\\n    }\\n\\n    /**\\n     * @dev Depositor funds the escrow\\n     */\\n    function deposit() external payable onlyDepositor notFunded whenNotPaused nonReentrant {\\n        if (msg.value == 0) revert InvalidAmount();\\n\\n        amount = msg.value;\\n        isFunded = true;\\n        emit Deposited(depositor, msg.value);\\n    }\\n\\n    /**\\n     * @dev Arbiter releases funds to beneficiary\\n     */\\n    function release() external onlyArbiter requireFunded notReleased whenNotPaused nonReentrant {\\n        isReleased = true;\\n        \\n        (bool success, ) = payable(beneficiary).call{value: amount}(\\\"\\\");\\n        require(success, \\\"Failed to send ETH to beneficiary\\\");\\n        \\n        emit Released(beneficiary, amount);\\n    }\\n\\n    /**\\n     * @dev Arbiter refunds funds to depositor\\n     */\\n    function refund() external onlyArbiter requireFunded notReleased whenNotPaused nonReentrant {\\n        isRefunded = true;\\n        \\n        (bool success, ) = payable(depositor).call{value: amount}(\\\"\\\");\\n        require(success, \\\"Failed to send ETH to depositor\\\");\\n        \\n        emit Refunded(depositor, amount);\\n    }\\n\\n    /**\\n     * @dev Get escrow status\\n     */\\n    function getEscrowStatus() external view returns (\\n        address _depositor,\\n        address _beneficiary,\\n        address _arbiter,\\n        uint256 _amount,\\n        bool _isFunded,\\n        bool _isReleased,\\n        bool _isRefunded\\n    ) {\\n        return (depositor, beneficiary, arbiter, amount, isFunded, isReleased, isRefunded);\\n    }\\n\\n    /**\\n     * @dev Emergency pause function (only owner)\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Emergency unpause function (only owner)\\n     */\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev Emergency withdrawal function (only owner, when paused)\\n     */\\n    function emergencyWithdraw() external onlyOwner whenPaused {\\n        uint256 balance = address(this).balance;\\n        if (balance > 0) {\\n            (bool success, ) = payable(owner()).call{value: balance}(\\\"\\\");\\n            require(success, \\\"Failed to withdraw ETH\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to receive ETH\\n     */\\n    receive() external payable {\\n        // Only allow deposits from the depositor\\n        if (msg.sender != depositor) {\\n            revert OnlyDepositorCanSendETH();\\n        }\\n        \\n        // Handle the deposit\\n        if (!isFunded) {\\n            amount = msg.value;\\n            isFunded = true;\\n            emit Deposited(depositor, msg.value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to handle failed ETH transfers\\n     */\\n    fallback() external payable {\\n        revert(\\\"Function not found\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xd70fa76ddec5138b7d39e41648b61fea72adea85a9a447af701d944926b7be28\",\"license\":\"MIT\"},\"contracts/TrustEscrowFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./TrustEscrow.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\n\\n/**\\n * @title TrustEscrowFactory\\n * @dev Factory contract for creating TrustEscrow instances\\n * @author Your Name\\n */\\ncontract TrustEscrowFactory is Ownable, Pausable {\\n    // Custom errors\\n    error InvalidAddress();\\n    error ArraysLengthMismatch();\\n    error EmptyArrays();\\n    error TooManyEscrows();\\n    error EscrowDoesNotExist();\\n    error FactoryIsPaused();\\n\\n    // Array to store all created escrow addresses\\n    address[] public escrows;\\n    \\n    // Mapping from user address to their created escrows\\n    mapping(address => address[]) public userEscrows;\\n    \\n    // Mapping from escrow address to escrow info\\n    mapping(address => EscrowInfo) public escrowInfo;\\n    \\n    // Events\\n    event EscrowCreated(\\n        address indexed escrowAddress,\\n        address indexed depositor,\\n        address indexed beneficiary,\\n        address arbiter,\\n        uint256 timestamp\\n    );\\n    \\n    event FactoryPaused(address indexed pauser);\\n    event FactoryUnpaused(address indexed unpauser);\\n    \\n    // Struct to store escrow information\\n    struct EscrowInfo {\\n        address depositor;\\n        address beneficiary;\\n        address arbiter;\\n        uint256 createdAt;\\n        bool exists;\\n    }\\n    \\n    // Modifiers\\n    // Note: whenNotPaused is inherited from Pausable contract\\n    \\n    /**\\n     * @dev Constructor sets the factory owner\\n     */\\n    constructor() Ownable(msg.sender) {}\\n    \\n    /**\\n     * @dev Create a new escrow contract\\n     * @param _beneficiary The address that will receive funds if released\\n     * @param _arbiter The address that can release or refund funds\\n     * @return escrowAddress The address of the newly created escrow\\n     */\\n    function createEscrow(\\n        address _beneficiary,\\n        address _arbiter\\n    ) internal returns (address escrowAddress) {\\n        if (_beneficiary == address(0)) revert InvalidAddress();\\n        if (_arbiter == address(0)) revert InvalidAddress();\\n        if (_beneficiary == _arbiter) revert InvalidAddress();\\n        if (_beneficiary == msg.sender) revert InvalidAddress();\\n        if (_arbiter == msg.sender) revert InvalidAddress();\\n        \\n        // Create new escrow contract\\n        TrustEscrow escrow = new TrustEscrow(msg.sender, _beneficiary, _arbiter);\\n        escrowAddress = address(escrow);\\n        \\n        // Store escrow information\\n        escrowInfo[escrowAddress] = EscrowInfo({\\n            depositor: msg.sender,\\n            beneficiary: _beneficiary,\\n            arbiter: _arbiter,\\n            createdAt: block.timestamp,\\n            exists: true\\n        });\\n        \\n        // Add to global escrows array\\n        escrows.push(escrowAddress);\\n        \\n        // Add to user's escrows array\\n        userEscrows[msg.sender].push(escrowAddress);\\n        \\n        // Emit event\\n        emit EscrowCreated(\\n            escrowAddress,\\n            msg.sender,\\n            _beneficiary,\\n            _arbiter,\\n            block.timestamp\\n        );\\n    }\\n\\n    /**\\n     * @dev Create a new escrow contract (external function)\\n     * @param _beneficiary The address that will receive funds if released\\n     * @param _arbiter The address that can release or refund funds\\n     * @return escrowAddress The address of the newly created escrow\\n     */\\n    function createEscrowExternal(\\n        address _beneficiary,\\n        address _arbiter\\n    ) external whenNotPaused returns (address escrowAddress) {\\n        return createEscrow(_beneficiary, _arbiter);\\n    }\\n    \\n    /**\\n     * @dev Create multiple escrows in a single transaction\\n     * @param _beneficiaries Array of beneficiary addresses\\n     * @param _arbiters Array of arbiter addresses\\n     * @return escrowAddresses Array of created escrow addresses\\n     */\\n    function createMultipleEscrows(\\n        address[] calldata _beneficiaries,\\n        address[] calldata _arbiters\\n    ) external whenNotPaused returns (address[] memory escrowAddresses) {\\n        if (_beneficiaries.length != _arbiters.length) revert ArraysLengthMismatch();\\n        if (_beneficiaries.length == 0) revert EmptyArrays();\\n        if (_beneficiaries.length > 10) revert TooManyEscrows();\\n        \\n        escrowAddresses = new address[](_beneficiaries.length);\\n        \\n        for (uint256 i = 0; i < _beneficiaries.length; i++) {\\n            escrowAddresses[i] = createEscrow(_beneficiaries[i], _arbiters[i]);\\n        }\\n    }\\n    \\n    /**\\n     * @dev Get all escrows created by a specific user\\n     * @param _user The user address\\n     * @return Array of escrow addresses\\n     */\\n    function getUserEscrows(address _user) external view returns (address[] memory) {\\n        return userEscrows[_user];\\n    }\\n    \\n    /**\\n     * @dev Get all escrows in the factory\\n     * @return Array of all escrow addresses\\n     */\\n    function getAllEscrows() external view returns (address[] memory) {\\n        return escrows;\\n    }\\n    \\n    /**\\n     * @dev Get total number of escrows created\\n     * @return Total count of escrows\\n     */\\n    function getEscrowCount() external view returns (uint256) {\\n        return escrows.length;\\n    }\\n    \\n    /**\\n     * @dev Get escrow information by address\\n     * @param _escrow The escrow contract address\\n     * @return EscrowInfo struct containing escrow details\\n     */\\n    function getEscrowInfo(address _escrow) external view returns (EscrowInfo memory) {\\n        if (!escrowInfo[_escrow].exists) revert EscrowDoesNotExist();\\n        return escrowInfo[_escrow];\\n    }\\n    \\n    /**\\n     * @dev Check if an address is a valid escrow created by this factory\\n     * @param _escrow The escrow contract address\\n     * @return True if valid escrow, false otherwise\\n     */\\n    function isValidEscrow(address _escrow) external view returns (bool) {\\n        return escrowInfo[_escrow].exists;\\n    }\\n    \\n    /**\\n     * @dev Get escrows by status (funded, released, refunded)\\n     * @param _status The status to filter by (0: all, 1: funded, 2: released, 3: refunded)\\n     * @return Array of escrow addresses matching the status\\n     */\\n    function getEscrowsByStatus(uint8 _status) external view returns (address[] memory) {\\n        address[] memory filteredEscrows = new address[](escrows.length);\\n        uint256 count = 0;\\n        \\n        for (uint256 i = 0; i < escrows.length; i++) {\\n            address escrowAddr = escrows[i];\\n            TrustEscrow escrow = TrustEscrow(payable(escrowAddr));\\n            \\n            bool include = false;\\n            if (_status == 0) {\\n                include = true; // All escrows\\n            } else if (_status == 1) {\\n                include = escrow.isFunded();\\n            } else if (_status == 2) {\\n                include = escrow.isReleased();\\n            } else if (_status == 3) {\\n                include = escrow.isRefunded();\\n            }\\n            \\n            if (include) {\\n                filteredEscrows[count] = escrowAddr;\\n                count++;\\n            }\\n        }\\n        \\n        // Resize array to actual count\\n        address[] memory result = new address[](count);\\n        for (uint256 i = 0; i < count; i++) {\\n            result[i] = filteredEscrows[i];\\n        }\\n        \\n        return result;\\n    }\\n    \\n    /**\\n     * @dev Emergency pause function (only owner)\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n        emit FactoryPaused(msg.sender);\\n    }\\n    \\n    /**\\n     * @dev Emergency unpause function (only owner)\\n     */\\n    function unpause() external onlyOwner {\\n        _unpause();\\n        emit FactoryUnpaused(msg.sender);\\n    }\\n    \\n    /**\\n     * @dev Get factory statistics\\n     * @return totalEscrows Total number of escrows created\\n     * @return totalFunded Number of funded escrows\\n     * @return totalReleased Number of released escrows\\n     * @return totalRefunded Number of refunded escrows\\n     */\\n    function getFactoryStats() external view returns (\\n        uint256 totalEscrows,\\n        uint256 totalFunded,\\n        uint256 totalReleased,\\n        uint256 totalRefunded\\n    ) {\\n        totalEscrows = escrows.length;\\n        \\n        for (uint256 i = 0; i < escrows.length; i++) {\\n            TrustEscrow escrow = TrustEscrow(payable(escrows[i]));\\n            \\n            if (escrow.isFunded()) {\\n                totalFunded++;\\n            }\\n            if (escrow.isReleased()) {\\n                totalReleased++;\\n            }\\n            if (escrow.isRefunded()) {\\n                totalRefunded++;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1a026dc9ff9aeee5c4a21cec2d790d64580537ab7f83da35dc1c9f36515df08\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50338061003757604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61004081610046565b50610096565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6121b7806100a56000396000f3fe60806040523480156200001157600080fd5b50600436106200012d5760003560e01c80637f944dd011620000af5780639a6ac36f116200007a5780639a6ac36f1462000340578063be49d5df146200034a578063c92264451462000361578063cdf53df8146200038c578063f2fde38b14620003a357600080fd5b80637f944dd014620002805780638456cb5914620002975780638da5cb5b14620002a157806390eca5e814620002b357600080fd5b8063502a8a9511620000fc578063502a8a95146200019b5780635c975abb14620001ff5780635ccea85e146200021e578063646ce6b91462000244578063715018a6146200027657600080fd5b8063012f52ee146200013257806316b1513514620001665780633ebb838814620001785780633f4ba83a146200018f575b600080fd5b6200014962000143366004620010ff565b620003ba565b6040516001600160a01b0390911681526020015b60405180910390f35b6001546040519081526020016200015d565b620001496200018936600462001136565b620003e5565b6200019962000404565b005b620001b2620001ac3660046200116e565b62000445565b6040805182516001600160a01b0390811682526020808501518216908301528383015116918101919091526060808301519082015260809182015115159181019190915260a0016200015d565b600054600160a01b900460ff165b60405190151581526020016200015d565b620002356200022f3660046200116e565b6200050d565b6040516200015d91906200118c565b6200020d620002553660046200116e565b6001600160a01b031660009081526003602052604090206004015460ff1690565b6200019962000585565b6200014962000291366004620011db565b6200059d565b62000199620005d6565b6000546001600160a01b031662000149565b62000306620002c43660046200116e565b6003602081905260009182526040909120805460018201546002830154938301546004909301546001600160a01b039283169491831693919092169160ff1685565b604080516001600160a01b039687168152948616602086015292909416918301919091526060820152901515608082015260a0016200015d565b6200023562000617565b620002356200035b36600462001257565b6200067b565b6200036b620007f0565b6040805194855260208501939093529183015260608201526080016200015d565b620002356200039d366004620012ca565b620009bd565b62000199620003b43660046200116e565b62000cae565b60018181548110620003cb57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000620003f162000cf6565b620003fd838362000d22565b9392505050565b6200040e62000faa565b6200041862000fd9565b60405133907f5dd33ddbee1b2bb2cfe2e04a15fcc4e2071c141d15e24d1fe1b5d6b80f355c0c90600090a2565b6040805160a0810182526000808252602080830182905282840182905260608301829052608083018290526001600160a01b038516825260039052919091206004015460ff16620004a957604051636a4d9b7760e01b815260040160405180910390fd5b506001600160a01b03908116600090815260036020818152604092839020835160a0810185528154861681526001820154861692810192909252600281015490941692810192909252820154606082015260049091015460ff161515608082015290565b6001600160a01b0381166000908152600260209081526040918290208054835181840281018401909452808452606093928301828280156200057957602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116200055a575b50505050509050919050565b6200058f62000faa565b6200059b600062001030565b565b60026020528160005260406000208181548110620005ba57600080fd5b6000918252602090912001546001600160a01b03169150829050565b620005e062000faa565b620005ea62001080565b60405133907ff7ab4f18771ba1e5f8db30e61ceed7bc8096937655edc7b3cae25a61921f4a1e90600090a2565b606060018054806020026020016040519081016040528092919081815260200182805480156200067157602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000652575b5050505050905090565b60606200068762000cf6565b838214620006a8576040516307e11acb60e51b815260040160405180910390fd5b6000849003620006cb5760405163a600c81d60e01b815260040160405180910390fd5b600a841115620006ee57604051630adff7cd60e01b815260040160405180910390fd5b8367ffffffffffffffff8111156200070a576200070a620012ef565b60405190808252806020026020018201604052801562000734578160200160208202803683370190505b50905060005b84811015620007e757620007a58686838181106200075c576200075c62001305565b90506020020160208101906200077391906200116e565b85858481811062000788576200078862001305565b90506020020160208101906200079f91906200116e565b62000d22565b828281518110620007ba57620007ba62001305565b6001600160a01b039092166020928302919091019091015280620007de816200131b565b9150506200073a565b50949350505050565b60015460008080805b600154811015620009b6576000600182815481106200081c576200081c62001305565b6000918252602091829020015460408051637c65430360e01b815290516001600160a01b0390921693508392637c654303926004808401938290030181865afa1580156200086e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000894919062001343565b15620008aa5784620008a6816200131b565b9550505b806001600160a01b031663fa2a89976040518163ffffffff1660e01b8152600401602060405180830381865afa158015620008e9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200090f919062001343565b1562000925578362000921816200131b565b9450505b806001600160a01b031663779cd0836040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000964573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200098a919062001343565b15620009a057826200099c816200131b565b9350505b5080620009ad816200131b565b915050620007f9565b5090919293565b60015460609060009067ffffffffffffffff811115620009e157620009e1620012ef565b60405190808252806020026020018201604052801562000a0b578160200160208202803683370190505b5090506000805b60015481101562000bf75760006001828154811062000a355762000a3562001305565b60009182526020822001546001600160a01b03169150819060ff8816810362000a615750600162000b99565b8760ff1660010362000ada57816001600160a01b0316637c6543036040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000aac573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ad2919062001343565b905062000b99565b8760ff1660020362000b2557816001600160a01b031663fa2a89976040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000aac573d6000803e3d6000fd5b8760ff1660030362000b9957816001600160a01b031663779cd0836040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000b70573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b96919062001343565b90505b801562000bde578286868151811062000bb65762000bb662001305565b6001600160a01b03909216602092830291909101909101528462000bda816200131b565b9550505b505050808062000bee906200131b565b91505062000a12565b5060008167ffffffffffffffff81111562000c165762000c16620012ef565b60405190808252806020026020018201604052801562000c40578160200160208202803683370190505b50905060005b82811015620007e75783818151811062000c645762000c6462001305565b602002602001015182828151811062000c815762000c8162001305565b6001600160a01b03909216602092830291909101909101528062000ca5816200131b565b91505062000c46565b62000cb862000faa565b6001600160a01b03811662000ce857604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b62000cf38162001030565b50565b600054600160a01b900460ff16156200059b5760405163d93c066560e01b815260040160405180910390fd5b60006001600160a01b03831662000d4c5760405163e6c4247b60e01b815260040160405180910390fd5b6001600160a01b03821662000d745760405163e6c4247b60e01b815260040160405180910390fd5b816001600160a01b0316836001600160a01b03160362000da75760405163e6c4247b60e01b815260040160405180910390fd5b336001600160a01b0384160362000dd15760405163e6c4247b60e01b815260040160405180910390fd5b336001600160a01b0383160362000dfb5760405163e6c4247b60e01b815260040160405180910390fd5b600033848460405162000e0e90620010f1565b6001600160a01b03938416815291831660208301529091166040820152606001604051809103906000f08015801562000e4b573d6000803e3d6000fd5b506040805160a081018252338082526001600160a01b0388811660208085018281528a84168688019081524260608801818152600160808a01818152888d1660008181526003808a528e82209d518e54908d166001600160a01b0319918216178f5598518e86018054918e16918b1691909117905596516002808f01805492909d16918a1691909117909b559351958c0195909555516004909a0180549a151560ff19909b169a909a179099558854808a018a557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180548516841790558781529584528886208054988901815586529290942090950180549095168317909455935194965086955092939092917f5110acfd33aad02838430d854a830e50cb07377fab40a6e84daeedb1b15136009162000f9b9189916001600160a01b03929092168252602082015260400190565b60405180910390a45092915050565b6000546001600160a01b031633146200059b5760405163118cdaa760e01b815233600482015260240162000cdf565b62000fe3620010c6565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6200108a62000cf6565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258620010133390565b600054600160a01b900460ff166200059b57604051638dfc202b60e01b815260040160405180910390fd5b610e1a806200136883390190565b6000602082840312156200111257600080fd5b5035919050565b80356001600160a01b03811681146200113157600080fd5b919050565b600080604083850312156200114a57600080fd5b620011558362001119565b9150620011656020840162001119565b90509250929050565b6000602082840312156200118157600080fd5b620003fd8262001119565b6020808252825182820181905260009190848201906040850190845b81811015620011cf5783516001600160a01b031683529284019291840191600101620011a8565b50909695505050505050565b60008060408385031215620011ef57600080fd5b620011fa8362001119565b946020939093013593505050565b60008083601f8401126200121b57600080fd5b50813567ffffffffffffffff8111156200123457600080fd5b6020830191508360208260051b85010111156200125057600080fd5b9250929050565b600080600080604085870312156200126e57600080fd5b843567ffffffffffffffff808211156200128757600080fd5b620012958883890162001208565b90965094506020870135915080821115620012af57600080fd5b50620012be8782880162001208565b95989497509550505050565b600060208284031215620012dd57600080fd5b813560ff81168114620003fd57600080fd5b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000600182016200133c57634e487b7160e01b600052601160045260246000fd5b5060010190565b6000602082840312156200135657600080fd5b81518015158114620003fd57600080fdfe6080604052604051610e1a380380610e1a83398101604081905261002291610252565b6001600055826001600160a01b03811661005657604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61005f816101dc565b506001600160a01b0383166100875760405163e6c4247b60e01b815260040160405180910390fd5b6001600160a01b0382166100ae5760405163e6c4247b60e01b815260040160405180910390fd5b6001600160a01b0381166100d55760405163e6c4247b60e01b815260040160405180910390fd5b806001600160a01b0316826001600160a01b0316036101075760405163e6c4247b60e01b815260040160405180910390fd5b816001600160a01b0316836001600160a01b0316036101395760405163e6c4247b60e01b815260040160405180910390fd5b806001600160a01b0316836001600160a01b03160361016b5760405163e6c4247b60e01b815260040160405180910390fd5b600280546001600160a01b03199081166001600160a01b03868116918217909355600380548316868516908117909155600480549093169385169384179092556040517f4743c0c2884de4f19f280dbd2cc93bc24491cdf876ed107046fe8194183c09e990600090a4505050610295565b600180546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80516001600160a01b038116811461024d57600080fd5b919050565b60008060006060848603121561026757600080fd5b61027084610236565b925061027e60208501610236565b915061028c60408501610236565b90509250925092565b610b76806102a46000396000f3fe60806040526004361061010d5760003560e01c806386d1a69f11610095578063d0e30db011610064578063d0e30db0146103c5578063db2e21bc146103cd578063f2fde38b146103e2578063fa2a899714610402578063fe25e00a146104215761019d565b806386d1a69f146103495780638da5cb5b1461035e578063aa8c217c14610381578063c7c4ff46146103a55761019d565b80636234216d116100dc5780636234216d1461026a578063715018a6146102e5578063779cd083146102fa5780637c6543031461031a5780638456cb59146103345761019d565b806338af3eed146101df5780633f4ba83a1461021c578063590e1ae3146102315780635c975abb146102465761019d565b3661019d576002546001600160a01b0316331461013d5760405163a3825a4360e01b815260040160405180910390fd5b60065460ff1661019b573460058190556006805460ff191660011790556002546040519182526001600160a01b0316907f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c49060200160405180910390a25b005b60405162461bcd60e51b8152602060048201526012602482015271119d5b98dd1a5bdb881b9bdd08199bdd5b9960721b60448201526064015b60405180910390fd5b3480156101eb57600080fd5b506003546101ff906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561022857600080fd5b5061019b610441565b34801561023d57600080fd5b5061019b610453565b34801561025257600080fd5b5060015460ff165b6040519015158152602001610213565b34801561027657600080fd5b50600254600354600454600554600654604080516001600160a01b03968716815294861660208601529490921693830193909352606082019290925260ff8083161515608083015261010083048116151560a083015262010000909204909116151560c082015260e001610213565b3480156102f157600080fd5b5061019b6105f4565b34801561030657600080fd5b5060065461025a9062010000900460ff1681565b34801561032657600080fd5b5060065461025a9060ff1681565b34801561034057600080fd5b5061019b610606565b34801561035557600080fd5b5061019b610616565b34801561036a57600080fd5b5060015461010090046001600160a01b03166101ff565b34801561038d57600080fd5b5061039760055481565b604051908152602001610213565b3480156103b157600080fd5b506002546101ff906001600160a01b031681565b61019b6107b0565b3480156103d957600080fd5b5061019b61088d565b3480156103ee57600080fd5b5061019b6103fd366004610b10565b61094a565b34801561040e57600080fd5b5060065461025a90610100900460ff1681565b34801561042d57600080fd5b506004546101ff906001600160a01b031681565b610449610985565b6104516109b8565b565b6004546001600160a01b0316331461047e576040516372cc71e760e11b815260040160405180910390fd5b60065460ff166104a157604051636af784dd60e11b815260040160405180910390fd5b600654610100900460ff16806104bf575060065462010000900460ff165b156104dd576040516331da482760e11b815260040160405180910390fd5b6104e5610a0a565b6104ed610a2e565b6006805462ff00001916620100001790556002546005546040516000926001600160a01b031691908381818185875af1925050503d806000811461054d576040519150601f19603f3d011682016040523d82523d6000602084013e610552565b606091505b50509050806105a35760405162461bcd60e51b815260206004820152601f60248201527f4661696c656420746f2073656e642045544820746f206465706f7369746f720060448201526064016101d6565b6002546005546040519081526001600160a01b03909116907fd7dee2702d63ad89917b6a4da9981c90c4d24f8c2bdfd64c604ecae57d8d0651906020015b60405180910390a2506104516001600055565b6105fc610985565b6104516000610a58565b61060e610985565b610451610ab2565b6004546001600160a01b03163314610641576040516372cc71e760e11b815260040160405180910390fd5b60065460ff1661066457604051636af784dd60e11b815260040160405180910390fd5b600654610100900460ff1680610682575060065462010000900460ff165b156106a0576040516331da482760e11b815260040160405180910390fd5b6106a8610a0a565b6106b0610a2e565b6006805461ff0019166101001790556003546005546040516000926001600160a01b031691908381818185875af1925050503d806000811461070e576040519150601f19603f3d011682016040523d82523d6000602084013e610713565b606091505b505090508061076e5760405162461bcd60e51b815260206004820152602160248201527f4661696c656420746f2073656e642045544820746f2062656e656669636961726044820152607960f81b60648201526084016101d6565b6003546005546040519081526001600160a01b03909116907fb21fb52d5749b80f3182f8c6992236b5e5576681880914484d7f4c9b062e619e906020016105e1565b6002546001600160a01b031633146107db576040516319d1820960e31b815260040160405180910390fd5b60065460ff16156107ff57604051635adf638760e01b815260040160405180910390fd5b610807610a0a565b61080f610a2e565b346000036108305760405163162908e360e11b815260040160405180910390fd5b3460058190556006805460ff191660011790556002546040519182526001600160a01b0316907f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c49060200160405180910390a26104516001600055565b610895610985565b61089d610aed565b4780156109475760015460405160009161010090046001600160a01b03169083908381818185875af1925050503d80600081146108f6576040519150601f19603f3d011682016040523d82523d6000602084013e6108fb565b606091505b50509050806109455760405162461bcd60e51b815260206004820152601660248201527508cc2d2d8cac840e8de40eed2e8d0c8e4c2ee408aa8960531b60448201526064016101d6565b505b50565b610952610985565b6001600160a01b03811661097c57604051631e4fbdf760e01b8152600060048201526024016101d6565b61094781610a58565b6001546001600160a01b036101009091041633146104515760405163118cdaa760e01b81523360048201526024016101d6565b6109c0610aed565b6001805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60015460ff16156104515760405163d93c066560e01b815260040160405180910390fd5b600260005403610a5157604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b600180546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b610aba610a0a565b6001805460ff1916811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258336109ed565b60015460ff1661045157604051638dfc202b60e01b815260040160405180910390fd5b600060208284031215610b2257600080fd5b81356001600160a01b0381168114610b3957600080fd5b939250505056fea264697066735822122042954eb47a9900113126f462ccda8a5cc1a078bd873bd42e74cded3dccc6080e64736f6c63430008140033a26469706673582212202ab8f3db7100246c1197380bbcb41d1fcd044eba63b287e72c3fe75051fded9d64736f6c63430008140033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200012d5760003560e01c80637f944dd011620000af5780639a6ac36f116200007a5780639a6ac36f1462000340578063be49d5df146200034a578063c92264451462000361578063cdf53df8146200038c578063f2fde38b14620003a357600080fd5b80637f944dd014620002805780638456cb5914620002975780638da5cb5b14620002a157806390eca5e814620002b357600080fd5b8063502a8a9511620000fc578063502a8a95146200019b5780635c975abb14620001ff5780635ccea85e146200021e578063646ce6b91462000244578063715018a6146200027657600080fd5b8063012f52ee146200013257806316b1513514620001665780633ebb838814620001785780633f4ba83a146200018f575b600080fd5b6200014962000143366004620010ff565b620003ba565b6040516001600160a01b0390911681526020015b60405180910390f35b6001546040519081526020016200015d565b620001496200018936600462001136565b620003e5565b6200019962000404565b005b620001b2620001ac3660046200116e565b62000445565b6040805182516001600160a01b0390811682526020808501518216908301528383015116918101919091526060808301519082015260809182015115159181019190915260a0016200015d565b600054600160a01b900460ff165b60405190151581526020016200015d565b620002356200022f3660046200116e565b6200050d565b6040516200015d91906200118c565b6200020d620002553660046200116e565b6001600160a01b031660009081526003602052604090206004015460ff1690565b6200019962000585565b6200014962000291366004620011db565b6200059d565b62000199620005d6565b6000546001600160a01b031662000149565b62000306620002c43660046200116e565b6003602081905260009182526040909120805460018201546002830154938301546004909301546001600160a01b039283169491831693919092169160ff1685565b604080516001600160a01b039687168152948616602086015292909416918301919091526060820152901515608082015260a0016200015d565b6200023562000617565b620002356200035b36600462001257565b6200067b565b6200036b620007f0565b6040805194855260208501939093529183015260608201526080016200015d565b620002356200039d366004620012ca565b620009bd565b62000199620003b43660046200116e565b62000cae565b60018181548110620003cb57600080fd5b6000918252602090912001546001600160a01b0316905081565b6000620003f162000cf6565b620003fd838362000d22565b9392505050565b6200040e62000faa565b6200041862000fd9565b60405133907f5dd33ddbee1b2bb2cfe2e04a15fcc4e2071c141d15e24d1fe1b5d6b80f355c0c90600090a2565b6040805160a0810182526000808252602080830182905282840182905260608301829052608083018290526001600160a01b038516825260039052919091206004015460ff16620004a957604051636a4d9b7760e01b815260040160405180910390fd5b506001600160a01b03908116600090815260036020818152604092839020835160a0810185528154861681526001820154861692810192909252600281015490941692810192909252820154606082015260049091015460ff161515608082015290565b6001600160a01b0381166000908152600260209081526040918290208054835181840281018401909452808452606093928301828280156200057957602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116200055a575b50505050509050919050565b6200058f62000faa565b6200059b600062001030565b565b60026020528160005260406000208181548110620005ba57600080fd5b6000918252602090912001546001600160a01b03169150829050565b620005e062000faa565b620005ea62001080565b60405133907ff7ab4f18771ba1e5f8db30e61ceed7bc8096937655edc7b3cae25a61921f4a1e90600090a2565b606060018054806020026020016040519081016040528092919081815260200182805480156200067157602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000652575b5050505050905090565b60606200068762000cf6565b838214620006a8576040516307e11acb60e51b815260040160405180910390fd5b6000849003620006cb5760405163a600c81d60e01b815260040160405180910390fd5b600a841115620006ee57604051630adff7cd60e01b815260040160405180910390fd5b8367ffffffffffffffff8111156200070a576200070a620012ef565b60405190808252806020026020018201604052801562000734578160200160208202803683370190505b50905060005b84811015620007e757620007a58686838181106200075c576200075c62001305565b90506020020160208101906200077391906200116e565b85858481811062000788576200078862001305565b90506020020160208101906200079f91906200116e565b62000d22565b828281518110620007ba57620007ba62001305565b6001600160a01b039092166020928302919091019091015280620007de816200131b565b9150506200073a565b50949350505050565b60015460008080805b600154811015620009b6576000600182815481106200081c576200081c62001305565b6000918252602091829020015460408051637c65430360e01b815290516001600160a01b0390921693508392637c654303926004808401938290030181865afa1580156200086e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000894919062001343565b15620008aa5784620008a6816200131b565b9550505b806001600160a01b031663fa2a89976040518163ffffffff1660e01b8152600401602060405180830381865afa158015620008e9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200090f919062001343565b1562000925578362000921816200131b565b9450505b806001600160a01b031663779cd0836040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000964573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200098a919062001343565b15620009a057826200099c816200131b565b9350505b5080620009ad816200131b565b915050620007f9565b5090919293565b60015460609060009067ffffffffffffffff811115620009e157620009e1620012ef565b60405190808252806020026020018201604052801562000a0b578160200160208202803683370190505b5090506000805b60015481101562000bf75760006001828154811062000a355762000a3562001305565b60009182526020822001546001600160a01b03169150819060ff8816810362000a615750600162000b99565b8760ff1660010362000ada57816001600160a01b0316637c6543036040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000aac573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ad2919062001343565b905062000b99565b8760ff1660020362000b2557816001600160a01b031663fa2a89976040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000aac573d6000803e3d6000fd5b8760ff1660030362000b9957816001600160a01b031663779cd0836040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000b70573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b96919062001343565b90505b801562000bde578286868151811062000bb65762000bb662001305565b6001600160a01b03909216602092830291909101909101528462000bda816200131b565b9550505b505050808062000bee906200131b565b91505062000a12565b5060008167ffffffffffffffff81111562000c165762000c16620012ef565b60405190808252806020026020018201604052801562000c40578160200160208202803683370190505b50905060005b82811015620007e75783818151811062000c645762000c6462001305565b602002602001015182828151811062000c815762000c8162001305565b6001600160a01b03909216602092830291909101909101528062000ca5816200131b565b91505062000c46565b62000cb862000faa565b6001600160a01b03811662000ce857604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b62000cf38162001030565b50565b600054600160a01b900460ff16156200059b5760405163d93c066560e01b815260040160405180910390fd5b60006001600160a01b03831662000d4c5760405163e6c4247b60e01b815260040160405180910390fd5b6001600160a01b03821662000d745760405163e6c4247b60e01b815260040160405180910390fd5b816001600160a01b0316836001600160a01b03160362000da75760405163e6c4247b60e01b815260040160405180910390fd5b336001600160a01b0384160362000dd15760405163e6c4247b60e01b815260040160405180910390fd5b336001600160a01b0383160362000dfb5760405163e6c4247b60e01b815260040160405180910390fd5b600033848460405162000e0e90620010f1565b6001600160a01b03938416815291831660208301529091166040820152606001604051809103906000f08015801562000e4b573d6000803e3d6000fd5b506040805160a081018252338082526001600160a01b0388811660208085018281528a84168688019081524260608801818152600160808a01818152888d1660008181526003808a528e82209d518e54908d166001600160a01b0319918216178f5598518e86018054918e16918b1691909117905596516002808f01805492909d16918a1691909117909b559351958c0195909555516004909a0180549a151560ff19909b169a909a179099558854808a018a557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180548516841790558781529584528886208054988901815586529290942090950180549095168317909455935194965086955092939092917f5110acfd33aad02838430d854a830e50cb07377fab40a6e84daeedb1b15136009162000f9b9189916001600160a01b03929092168252602082015260400190565b60405180910390a45092915050565b6000546001600160a01b031633146200059b5760405163118cdaa760e01b815233600482015260240162000cdf565b62000fe3620010c6565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6200108a62000cf6565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258620010133390565b600054600160a01b900460ff166200059b57604051638dfc202b60e01b815260040160405180910390fd5b610e1a806200136883390190565b6000602082840312156200111257600080fd5b5035919050565b80356001600160a01b03811681146200113157600080fd5b919050565b600080604083850312156200114a57600080fd5b620011558362001119565b9150620011656020840162001119565b90509250929050565b6000602082840312156200118157600080fd5b620003fd8262001119565b6020808252825182820181905260009190848201906040850190845b81811015620011cf5783516001600160a01b031683529284019291840191600101620011a8565b50909695505050505050565b60008060408385031215620011ef57600080fd5b620011fa8362001119565b946020939093013593505050565b60008083601f8401126200121b57600080fd5b50813567ffffffffffffffff8111156200123457600080fd5b6020830191508360208260051b85010111156200125057600080fd5b9250929050565b600080600080604085870312156200126e57600080fd5b843567ffffffffffffffff808211156200128757600080fd5b620012958883890162001208565b90965094506020870135915080821115620012af57600080fd5b50620012be8782880162001208565b95989497509550505050565b600060208284031215620012dd57600080fd5b813560ff81168114620003fd57600080fd5b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000600182016200133c57634e487b7160e01b600052601160045260246000fd5b5060010190565b6000602082840312156200135657600080fd5b81518015158114620003fd57600080fdfe6080604052604051610e1a380380610e1a83398101604081905261002291610252565b6001600055826001600160a01b03811661005657604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61005f816101dc565b506001600160a01b0383166100875760405163e6c4247b60e01b815260040160405180910390fd5b6001600160a01b0382166100ae5760405163e6c4247b60e01b815260040160405180910390fd5b6001600160a01b0381166100d55760405163e6c4247b60e01b815260040160405180910390fd5b806001600160a01b0316826001600160a01b0316036101075760405163e6c4247b60e01b815260040160405180910390fd5b816001600160a01b0316836001600160a01b0316036101395760405163e6c4247b60e01b815260040160405180910390fd5b806001600160a01b0316836001600160a01b03160361016b5760405163e6c4247b60e01b815260040160405180910390fd5b600280546001600160a01b03199081166001600160a01b03868116918217909355600380548316868516908117909155600480549093169385169384179092556040517f4743c0c2884de4f19f280dbd2cc93bc24491cdf876ed107046fe8194183c09e990600090a4505050610295565b600180546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80516001600160a01b038116811461024d57600080fd5b919050565b60008060006060848603121561026757600080fd5b61027084610236565b925061027e60208501610236565b915061028c60408501610236565b90509250925092565b610b76806102a46000396000f3fe60806040526004361061010d5760003560e01c806386d1a69f11610095578063d0e30db011610064578063d0e30db0146103c5578063db2e21bc146103cd578063f2fde38b146103e2578063fa2a899714610402578063fe25e00a146104215761019d565b806386d1a69f146103495780638da5cb5b1461035e578063aa8c217c14610381578063c7c4ff46146103a55761019d565b80636234216d116100dc5780636234216d1461026a578063715018a6146102e5578063779cd083146102fa5780637c6543031461031a5780638456cb59146103345761019d565b806338af3eed146101df5780633f4ba83a1461021c578063590e1ae3146102315780635c975abb146102465761019d565b3661019d576002546001600160a01b0316331461013d5760405163a3825a4360e01b815260040160405180910390fd5b60065460ff1661019b573460058190556006805460ff191660011790556002546040519182526001600160a01b0316907f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c49060200160405180910390a25b005b60405162461bcd60e51b8152602060048201526012602482015271119d5b98dd1a5bdb881b9bdd08199bdd5b9960721b60448201526064015b60405180910390fd5b3480156101eb57600080fd5b506003546101ff906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561022857600080fd5b5061019b610441565b34801561023d57600080fd5b5061019b610453565b34801561025257600080fd5b5060015460ff165b6040519015158152602001610213565b34801561027657600080fd5b50600254600354600454600554600654604080516001600160a01b03968716815294861660208601529490921693830193909352606082019290925260ff8083161515608083015261010083048116151560a083015262010000909204909116151560c082015260e001610213565b3480156102f157600080fd5b5061019b6105f4565b34801561030657600080fd5b5060065461025a9062010000900460ff1681565b34801561032657600080fd5b5060065461025a9060ff1681565b34801561034057600080fd5b5061019b610606565b34801561035557600080fd5b5061019b610616565b34801561036a57600080fd5b5060015461010090046001600160a01b03166101ff565b34801561038d57600080fd5b5061039760055481565b604051908152602001610213565b3480156103b157600080fd5b506002546101ff906001600160a01b031681565b61019b6107b0565b3480156103d957600080fd5b5061019b61088d565b3480156103ee57600080fd5b5061019b6103fd366004610b10565b61094a565b34801561040e57600080fd5b5060065461025a90610100900460ff1681565b34801561042d57600080fd5b506004546101ff906001600160a01b031681565b610449610985565b6104516109b8565b565b6004546001600160a01b0316331461047e576040516372cc71e760e11b815260040160405180910390fd5b60065460ff166104a157604051636af784dd60e11b815260040160405180910390fd5b600654610100900460ff16806104bf575060065462010000900460ff165b156104dd576040516331da482760e11b815260040160405180910390fd5b6104e5610a0a565b6104ed610a2e565b6006805462ff00001916620100001790556002546005546040516000926001600160a01b031691908381818185875af1925050503d806000811461054d576040519150601f19603f3d011682016040523d82523d6000602084013e610552565b606091505b50509050806105a35760405162461bcd60e51b815260206004820152601f60248201527f4661696c656420746f2073656e642045544820746f206465706f7369746f720060448201526064016101d6565b6002546005546040519081526001600160a01b03909116907fd7dee2702d63ad89917b6a4da9981c90c4d24f8c2bdfd64c604ecae57d8d0651906020015b60405180910390a2506104516001600055565b6105fc610985565b6104516000610a58565b61060e610985565b610451610ab2565b6004546001600160a01b03163314610641576040516372cc71e760e11b815260040160405180910390fd5b60065460ff1661066457604051636af784dd60e11b815260040160405180910390fd5b600654610100900460ff1680610682575060065462010000900460ff165b156106a0576040516331da482760e11b815260040160405180910390fd5b6106a8610a0a565b6106b0610a2e565b6006805461ff0019166101001790556003546005546040516000926001600160a01b031691908381818185875af1925050503d806000811461070e576040519150601f19603f3d011682016040523d82523d6000602084013e610713565b606091505b505090508061076e5760405162461bcd60e51b815260206004820152602160248201527f4661696c656420746f2073656e642045544820746f2062656e656669636961726044820152607960f81b60648201526084016101d6565b6003546005546040519081526001600160a01b03909116907fb21fb52d5749b80f3182f8c6992236b5e5576681880914484d7f4c9b062e619e906020016105e1565b6002546001600160a01b031633146107db576040516319d1820960e31b815260040160405180910390fd5b60065460ff16156107ff57604051635adf638760e01b815260040160405180910390fd5b610807610a0a565b61080f610a2e565b346000036108305760405163162908e360e11b815260040160405180910390fd5b3460058190556006805460ff191660011790556002546040519182526001600160a01b0316907f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c49060200160405180910390a26104516001600055565b610895610985565b61089d610aed565b4780156109475760015460405160009161010090046001600160a01b03169083908381818185875af1925050503d80600081146108f6576040519150601f19603f3d011682016040523d82523d6000602084013e6108fb565b606091505b50509050806109455760405162461bcd60e51b815260206004820152601660248201527508cc2d2d8cac840e8de40eed2e8d0c8e4c2ee408aa8960531b60448201526064016101d6565b505b50565b610952610985565b6001600160a01b03811661097c57604051631e4fbdf760e01b8152600060048201526024016101d6565b61094781610a58565b6001546001600160a01b036101009091041633146104515760405163118cdaa760e01b81523360048201526024016101d6565b6109c0610aed565b6001805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60015460ff16156104515760405163d93c066560e01b815260040160405180910390fd5b600260005403610a5157604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b600180546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b610aba610a0a565b6001805460ff1916811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258336109ed565b60015460ff1661045157604051638dfc202b60e01b815260040160405180910390fd5b600060208284031215610b2257600080fd5b81356001600160a01b0381168114610b3957600080fd5b939250505056fea264697066735822122042954eb47a9900113126f462ccda8a5cc1a078bd873bd42e74cded3dccc6080e64736f6c63430008140033a26469706673582212202ab8f3db7100246c1197380bbcb41d1fcd044eba63b287e72c3fe75051fded9d64736f6c63430008140033",
  "devdoc": {
    "author": "Your Name",
    "details": "Factory contract for creating TrustEscrow instances",
    "errors": {
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Constructor sets the factory owner"
      },
      "createEscrowExternal(address,address)": {
        "details": "Create a new escrow contract (external function)",
        "params": {
          "_arbiter": "The address that can release or refund funds",
          "_beneficiary": "The address that will receive funds if released"
        },
        "returns": {
          "escrowAddress": "The address of the newly created escrow"
        }
      },
      "createMultipleEscrows(address[],address[])": {
        "details": "Create multiple escrows in a single transaction",
        "params": {
          "_arbiters": "Array of arbiter addresses",
          "_beneficiaries": "Array of beneficiary addresses"
        },
        "returns": {
          "escrowAddresses": "Array of created escrow addresses"
        }
      },
      "getAllEscrows()": {
        "details": "Get all escrows in the factory",
        "returns": {
          "_0": "Array of all escrow addresses"
        }
      },
      "getEscrowCount()": {
        "details": "Get total number of escrows created",
        "returns": {
          "_0": "Total count of escrows"
        }
      },
      "getEscrowInfo(address)": {
        "details": "Get escrow information by address",
        "params": {
          "_escrow": "The escrow contract address"
        },
        "returns": {
          "_0": "EscrowInfo struct containing escrow details"
        }
      },
      "getEscrowsByStatus(uint8)": {
        "details": "Get escrows by status (funded, released, refunded)",
        "params": {
          "_status": "The status to filter by (0: all, 1: funded, 2: released, 3: refunded)"
        },
        "returns": {
          "_0": "Array of escrow addresses matching the status"
        }
      },
      "getFactoryStats()": {
        "details": "Get factory statistics",
        "returns": {
          "totalEscrows": "Total number of escrows created",
          "totalFunded": "Number of funded escrows",
          "totalRefunded": "Number of refunded escrows",
          "totalReleased": "Number of released escrows"
        }
      },
      "getUserEscrows(address)": {
        "details": "Get all escrows created by a specific user",
        "params": {
          "_user": "The user address"
        },
        "returns": {
          "_0": "Array of escrow addresses"
        }
      },
      "isValidEscrow(address)": {
        "details": "Check if an address is a valid escrow created by this factory",
        "params": {
          "_escrow": "The escrow contract address"
        },
        "returns": {
          "_0": "True if valid escrow, false otherwise"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Emergency pause function (only owner)"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Emergency unpause function (only owner)"
      }
    },
    "title": "TrustEscrowFactory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/TrustEscrowFactory.sol:TrustEscrowFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 186,
        "contract": "contracts/TrustEscrowFactory.sol:TrustEscrowFactory",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 833,
        "contract": "contracts/TrustEscrowFactory.sol:TrustEscrowFactory",
        "label": "escrows",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 838,
        "contract": "contracts/TrustEscrowFactory.sol:TrustEscrowFactory",
        "label": "userEscrows",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 843,
        "contract": "contracts/TrustEscrowFactory.sol:TrustEscrowFactory",
        "label": "escrowInfo",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(EscrowInfo)874_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_struct(EscrowInfo)874_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TrustEscrowFactory.EscrowInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(EscrowInfo)874_storage"
      },
      "t_struct(EscrowInfo)874_storage": {
        "encoding": "inplace",
        "label": "struct TrustEscrowFactory.EscrowInfo",
        "members": [
          {
            "astId": 865,
            "contract": "contracts/TrustEscrowFactory.sol:TrustEscrowFactory",
            "label": "depositor",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 867,
            "contract": "contracts/TrustEscrowFactory.sol:TrustEscrowFactory",
            "label": "beneficiary",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 869,
            "contract": "contracts/TrustEscrowFactory.sol:TrustEscrowFactory",
            "label": "arbiter",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 871,
            "contract": "contracts/TrustEscrowFactory.sol:TrustEscrowFactory",
            "label": "createdAt",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 873,
            "contract": "contracts/TrustEscrowFactory.sol:TrustEscrowFactory",
            "label": "exists",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}